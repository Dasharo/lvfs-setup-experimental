import os
from datetime import timedelta
from json import loads

def get_secret(name):
    # Allow to add secrets through Docker's secret functionality
    path = f"/run/secrets/{name}"
    if not os.path.exists(path):
        return os.environ[f"LVFS_{name.upper()}"]

    with open(path, 'r') as f:
        return f.read()


SECRET_KEY = get_secret('secret_key')
SECRET_VENDOR_SALT = get_secret('secret_vendor_salt')
SECRET_ADDR_SALT = get_secret('secret_addr_salt')

# SQLite does not require separate server so it's easier to setup development env.
# Probably should stick to whatever upstream does (PostgreSQL) in production.
# This path is relative to LVFS_INSTANCE_PATH (see the comment in lvfs.nix).
SQLALCHEMY_DATABASE_URI = os.environ.get("LVFS_DB_SERVER", "sqlite:///lvfs.db")
SQLALCHEMY_TRACK_MODIFICATIONS = False
SQLALCHEMY_ENGINE_OPTIONS = {
    "pool_recycle": 300,
    "pool_size": 5,
    "max_overflow": 10,
}

IP = '0.0.0.0'
PORT = 5000
HOST_NAME = os.environ['LVFS_HOST_NAME']
CDN_DOMAIN = os.environ['LVFS_CDN_DOMAIN']

TICKET_URL = 'https://gitlab.com/fwupd/lvfs-website/-/issues'
RELEASE = os.environ.get("LVFS_RELEASE", "production")

######## regular config
DEBUG = os.environ.get("LVFS_DEBUG", False)
PROPAGATE_EXCEPTIONS = True
APP_NAME = 'lvfs'
CERTS_DIR = '/data/certs/'
DOWNLOAD_DIR = '/data/downloads/'
SHARD_DIR = '/data/shards/'
UPLOAD_DIR = '/data/uploads/'
MIRROR_DIR = '/data/mirror/'
KEYRING_DIR = 'gnupg'
SEND_FILE_MAX_AGE_DEFAULT = timedelta(hours=4)
GEOIP_LOOKUP = True
GEOIP_DATABASE = '/data/geoip.mmdb'
GEOIP_URLS = [
    "https://data.public.lu/fr/datasets/r/10c227b5-c032-464c-a87b-55ef505a31d3",
]
# TODO: update?
SPONSORSHIP_URL = 'https://docs.google.com/presentation/d/1l_Rmkn2-UwOkS0XK5d6u9pi29TZpmG-upa4Lu5HuEy4/edit?usp=sharing'
CLIENT_DAILY_LIMIT = 250
MIRROR_DAILY_LIMIT = 1000
BANNED_USERAGENTS = [
    "*MJ12BOT*",
    "*ltx71*",
    "*Sogou*",
    "*webtech*",
    "*ldap://*",
    "*Content-Type*",
    "Mozilla/5.0",
    "win10chrome117",
    # from https://github.com/ai-robots-txt/ai.robots.txt/blob/main/robots.txt, lightly modified
    "Ai2Bot*",
    "AI2Bot*",
    "Amazonbot*",
    "anthropic*",
    "Applebot*",
    "Brightbot*",
    "Bytespider*",
    "CCBot*",
    "ChatGPT*",
    "Claude*",
    "cohere*",
    "Crawlspace*",
    "Diffbot*",
    "DuckAssistBot*",
    "FacebookBot*",
    "FriendlyCrawler*",
    "Google-Extended*",
    "GoogleOther*",
    "GoogleOther-Image*",
    "GoogleOther-Video*",
    "GPTBot*",
    "iaskspider*",
    "ICC-Crawler*",
    "ImagesiftBot*",
    "img2dataset*",
    "ISSCyberRiskCrawler*",
    "Kangaroo*",
    "Meta-ExternalAgent*",
    "Meta-ExternalFetcher*",
    "OAI-SearchBot*",
    "omgili*",
    "omgilibot*",
    "PanguBot*",
    "PerplexityBot*",
    "PetalBot*",
    "Scrapy*",
    "SemrushBot*",
    "Sidetrade*",
    "Thinkbot*",
    "ThinkChaos*",
    "Timpibot*",
    "VelenPublicWebCrawler*",
    "Webzio-Extended*",
    "YouBot*",
]

SESSION_COOKIE_SECURE = True
REMEMBER_COOKIE_SECURE = True

# TODO: update those fields?
COPYRIGHT_TEXT = 'Linux Vendor Firmware Service Project a Series of LF Projects, LLC and its contributors'
CHARTER_URL = 'https://gitlab.com/fwupd/lvfs-website/raw/master/docs/technical-charter.pdf'
TOS_URL = 'https://lfprojects.org'
HEALTHCHECK_FIRMWARE_ID = 1487

PREFERRED_URL_SCHEME = 'https'
# TODO: Probably needed, but for testing comment-out.
# MAIL_SERVER = os.environ.get("LVFS_SMTP_SERVER", None)
# MAIL_PORT = 587
# MAIL_USE_TLS = True
# MAIL_USE_SSL = False
# MAIL_USERNAME = get_secret('smtp_username')
# MAIL_PASSWORD = get_secret('smtp_password')
# # TODO: update mail address
# MAIL_DEFAULT_SENDER = ('LVFS Admin Team', 'lvfs_noreply@linuxfoundation.org')

CACHE_TYPE = 'FileSystemCache'
CACHE_DEFAULT_TIMEOUT = 3600
CACHE_DIR = '/data/cache/'
CACHE_THRESHOLD = 10000
CACHE_IGNORE_ERRORS = True
